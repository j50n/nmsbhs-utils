#!/usr/bin/env node

import { Parser } from "csv-parse";
import es from "event-stream";

// function handler(
//   data: string[],
//   callback: (error: any, data: string | null) => void
// ): void {
//   try {
//     console.error(data[1]);
//     const line = `${JSON.stringify(data)}\n`;
//     callback(null, line);
//   } catch (e) {
//     callback(e, null);
//   }
// }

process.stdin.setEncoding("utf8");

const p = new Parser({ delimiter: "," });

const bhData = new Promise(
  (resolve: (rows: string[][]) => void, reject: (error: any) => void) => {
    process.stdin.pipe(p).pipe(
      es.writeArray((err: any, array: string[][]) => {
        if (err) {
          reject(err);
        } else {
          resolve(array);
        }
      })
    );
  }
);

async function generate(): Promise<void> {
  const rows = await bhData;

  console.info("/*");
  console.info(
    " * This code is generated by parse-bhs.ts; changes will be overwritten."
  );
  console.info(
    ` * There are a total of ${rows.length -
      1} black hole data rows (before checks).`
  );
  console.info(" */");
  console.info("export const blackHoleData: string[][] = [");
  for (const row of rows.slice(1)) {
    console.info(
      `  ${JSON.stringify(row, null, "  ")
        .split("\n")
        .join("\n    ")},`
    );
  }
  console.info("];");
}

generate().catch((error: Error) => {
  console.error(`[ERROR] ${error.message}`);
  process.exit(1);
});
